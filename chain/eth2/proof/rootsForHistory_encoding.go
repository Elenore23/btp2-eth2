// Code generated by fastssz. DO NOT EDIT.
// Hash: 392022371031953539c833a4e646ed3a419b560d4ea1d7c087a1ef59bc0cf410
// Version: 0.1.3
package proof

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the RootsForHistory object
func (r *RootsForHistory) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the RootsForHistory object to a target array
func (r *RootsForHistory) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Roots'
	if size := len(r.Roots); size != 8192 {
		err = ssz.ErrVectorLengthFn("RootsForHistory.Roots", size, 8192)
		return
	}
	for ii := 0; ii < 8192; ii++ {
		if size := len(r.Roots[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("RootsForHistory.Roots[ii]", size, 32)
			return
		}
		dst = append(dst, r.Roots[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the RootsForHistory object
func (r *RootsForHistory) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 262144 {
		return ssz.ErrSize
	}

	// Field (0) 'Roots'
	r.Roots = make([][]byte, 8192)
	for ii := 0; ii < 8192; ii++ {
		if cap(r.Roots[ii]) == 0 {
			r.Roots[ii] = make([]byte, 0, len(buf[0:262144][ii*32:(ii+1)*32]))
		}
		r.Roots[ii] = append(r.Roots[ii], buf[0:262144][ii*32:(ii+1)*32]...)
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the RootsForHistory object
func (r *RootsForHistory) SizeSSZ() (size int) {
	size = 262144
	return
}

// HashTreeRoot ssz hashes the RootsForHistory object
func (r *RootsForHistory) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the RootsForHistory object with a hasher
func (r *RootsForHistory) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Roots'
	{
		if size := len(r.Roots); size != 8192 {
			err = ssz.ErrVectorLengthFn("RootsForHistory.Roots", size, 8192)
			return
		}
		subIndx := hh.Index()
		for _, i := range r.Roots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the RootsForHistory object
func (r *RootsForHistory) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(r)
}
